SELECT
TEST.TS_TEST_ID AS TEST_ID,
TEST.TS_NAME AS TEST_NAME,
TEST.TS_STEPS AS STEPS_IN_TEST,
TEST.TS_STATUS AS TEST_STATUS_STRING,
TEST.TS_CREATION_DATE AS TEST_CREATED_AT,
floor( months_between ( CURRENT_DATE , TEST.TS_CREATION_DATE)) AS TEST_CREATED_AT_MONTH_DIFF,
CASE
    WHEN floor( months_between ( CURRENT_DATE , TEST.TS_CREATION_DATE))  IN (0,1) THEN 1
    WHEN floor( months_between ( CURRENT_DATE , TEST.TS_CREATION_DATE))  IN(2,3,4,5,6) THEN 2
    WHEN floor( months_between ( CURRENT_DATE , TEST.TS_CREATION_DATE))  IN(7,8,9,10,11,12) THEN 3
    ELSE 4
END AS TEST_CREATED_AT_ORDER,
floor( months_between ( CURRENT_DATE , TEST.TS_CREATION_DATE)) AS TEST_CREATION_DATE,
TEST.TS_USER_04 AS TEST_PRIORITY_STRING,
REQ.RQ_REQ_ID AS REQUIREMENT_ID,
REQ.RQ_REQ_NAME AS REQUIREMENT_NAME,
REQ.RQ_FATHER_ID REQUIREMENT_FATHER_ID,
(SELECT RQ.RQ_REQ_NAME FROM REQ RQ WHERE RQ.RQ_REQ_ID = REQ.RQ_FATHER_ID) AS REQUIREMENT_FATHER_NAME,
REQ_PATH.PATH_NAME AS REQUIREMENT_PATH,
REQ_PATH.PATH_ID AS REQUIREMENT_PATH_ID,
REQ.RQ_REQ_PRIORITY AS REQUIREMENT_SEVERITY,
CASE
    WHEN RUN_MAX.RN_COUNT IS NULL THEN 0
    ELSE RUN_MAX.RN_COUNT
END AS RUNS_COUNT,
RUN.RN_EXECUTION_DATE AS RUN_EXECUTION_DATE,
RUN.RN_STATUS AS RUN_STATUS,
CASE
    WHEN floor( months_between ( CURRENT_DATE , RUN.RN_EXECUTION_DATE )) IN (0,1) THEN 1
    WHEN floor( months_between ( CURRENT_DATE , RUN.RN_EXECUTION_DATE )) IN(2,3,4,5,6) THEN 2
    WHEN floor( months_between ( CURRENT_DATE , RUN.RN_EXECUTION_DATE )) IN(7,8,9,10,11,12) THEN 3
    ELSE 4
END AS RUN_LAST_EXECUTION_ORDER,
floor( months_between ( CURRENT_DATE , RUN.RN_EXECUTION_DATE )) AS RUN_LAST_EXECUTION,
CASE
    WHEN BUG_STATISTICS.COUNT_BUGS IS NULL THEN 0
    ELSE BUG_STATISTICS.COUNT_BUGS
END AS COUNT_BUGS_TOTAL,
CASE
    WHEN BUG_STATISTICS.CLOSED_TICKETS IS NULL THEN 0
    ELSE BUG_STATISTICS.CLOSED_TICKETS
END AS COUNT_BUGS_CLOSED,
CASE
    WHEN BUG_STATISTICS.COUNT_BUGS IS NULL THEN 0
    ELSE BUG_STATISTICS.COUNT_BUGS - BUG_STATISTICS.CLOSED_TICKETS
END AS COUNT_BUGS_OPEN,
CASE
    WHEN BUG_STATISTICS.AVG_SEVERITY IS NULL THEN 0
    ELSE BUG_STATISTICS.AVG_SEVERITY
END AS AVG_BUG_SEVERITY,
CASE
    WHEN BUG_STATISTICS.AVG_STATUS IS NULL THEN 0
    ELSE BUG_STATISTICS.AVG_STATUS
END AS AVG_BUG_STATUS,
CASE
    WHEN BUG_STATISTICS.AVG_DETECTION_DATE IS NULL THEN 0
    ELSE BUG_STATISTICS.AVG_DETECTION_DATE
END AS AVG_BUG_CREATION_DATE,
floor( months_between ( CURRENT_DATE , TO_DATE(TEST.TS_VTS, 'YYYY-MM-DD HH24:MI:SS'))) AS TEST_LAST_MODIFICATION_MONTH,
CASE
    WHEN floor( months_between ( CURRENT_DATE , TO_DATE(TEST.TS_VTS, 'YYYY-MM-DD HH24:MI:SS')))  IN (0,1) THEN 1
    WHEN floor( months_between ( CURRENT_DATE , TO_DATE(TEST.TS_VTS, 'YYYY-MM-DD HH24:MI:SS')))  IN(2,3,4,5,6) THEN 2
    WHEN floor( months_between ( CURRENT_DATE , TO_DATE(TEST.TS_VTS, 'YYYY-MM-DD HH24:MI:SS')))  IN(7,8,9,10,11,12) THEN 3
    ELSE 4
END AS TEST_LAST_MODIFICATION_ORDER,
floor( months_between ( CURRENT_DATE , TO_DATE(TEST.TS_VTS, 'YYYY-MM-DD HH24:MI:SS'))) AS TEST_LAST_MODIFICATION

FROM TEST
LEFT JOIN (SELECT COUNT(R.RN_TEST_ID) AS RN_COUNT, MAX(R.RN_RUN_ID) AS RN_MAX_ID, R.RN_TEST_ID
           FROM RUN R
           GROUP BY R.RN_TEST_ID) RUN_MAX ON RUN_MAX.RN_TEST_ID = TEST.TS_TEST_ID
LEFT JOIN RUN ON RUN.RN_RUN_ID = RUN_MAX.RN_MAX_ID
LEFT JOIN REQ_COVER ON REQ_COVER.RC_ENTITY_ID = TEST.TS_TEST_ID
LEFT JOIN REQ ON REQ.RQ_REQ_ID = REQ_COVER.RC_REQ_ID
LEFT JOIN (SELECT
           BUG_PRE_STATS.TS_TEST_ID,
           COUNT(BUG_PRE_STATS.BG_BUG_ID) AS COUNT_BUGS,
           AVG(BUG_PRE_STATS.SEVERITY) AS AVG_SEVERITY,
           AVG(BUG_PRE_STATS.STATUS) AS AVG_STATUS,
           COUNT(BUG_PRE_STATS.BG_CLOSING_DATE) AS CLOSED_TICKETS,
           AVG(BUG_PRE_STATS.MONTH_SINCE_DETECTION) AS AVG_DETECTION_DATE
           FROM(
                      SELECT
                      TEST.TS_TEST_ID,
                      BUG.BG_BUG_ID,
                      CASE
                          WHEN BUG.BG_SEVERITY LIKE '1-Critical' THEN 1
                          WHEN BUG.BG_SEVERITY LIKE '2-High' THEN 2
                          WHEN BUG.BG_SEVERITY LIKE '3-Medium' THEN 3
                          WHEN BUG.BG_SEVERITY LIKE '4-Low' THEN 4
                          ELSE NULL
                      END AS SEVERITY,
                      CASE
                          WHEN BUG.BG_STATUS LIKE '01-New' THEN 1
						  WHEN BUG.BG_STATUS LIKE '02-Open' THEN 2
						  WHEN BUG.BG_STATUS LIKE '03-Recommended to reject' THEN 3
						  WHEN BUG.BG_STATUS LIKE '04-Info needed' THEN 4
						  WHEN BUG.BG_STATUS LIKE '05-In Progress' THEN 5
						  WHEN BUG.BG_STATUS LIKE '06-Fixed' THEN 6
						  WHEN BUG.BG_STATUS LIKE '07-Retest' THEN 7
						  WHEN BUG.BG_STATUS LIKE '08-Not Fixed' THEN 8
						  WHEN BUG.BG_STATUS LIKE '09-Closed' THEN 9
						  WHEN BUG.BG_STATUS LIKE '10-Rejected' THEN 10
                          ELSE 0
                      END AS STATUS,
                      BUG.BG_CLOSING_DATE,
                      floor( months_between ( CURRENT_DATE , BUG.BG_DETECTION_DATE)) AS MONTH_SINCE_DETECTION
                      FROM
                      ((((BUG LEFT JOIN LINK ON LINK.LN_BUG_ID = BUG.BG_BUG_ID)
                      LEFT JOIN STEP ON STEP.ST_ID = LINK.LN_ENTITY_ID)
                      LEFT JOIN RUN ON RUN.RN_RUN_ID = STEP.ST_RUN_ID)
                      LEFT JOIN TEST ON TEST.TS_TEST_ID = RUN.RN_TEST_ID)
                      WHERE LINK.LN_ENTITY_TYPE LIKE 'STEP'

                      UNION

                      SELECT
                      TEST.TS_TEST_ID,
                      BUG.BG_BUG_ID,
                      CASE
                          WHEN BUG.BG_SEVERITY LIKE '1-Critical' THEN 1
                          WHEN BUG.BG_SEVERITY LIKE '2-High' THEN 2
                          WHEN BUG.BG_SEVERITY LIKE '3-Medium' THEN 3
                          WHEN BUG.BG_SEVERITY LIKE '4-Low' THEN 4
                          ELSE NULL
                      END AS SEVERITY,
                      CASE
                          WHEN BUG.BG_STATUS LIKE '01-New' THEN 1
						  WHEN BUG.BG_STATUS LIKE '02-Open' THEN 2
						  WHEN BUG.BG_STATUS LIKE '03-Recommended to reject' THEN 3
						  WHEN BUG.BG_STATUS LIKE '04-Info needed' THEN 4
						  WHEN BUG.BG_STATUS LIKE '05-In Progress' THEN 5
						  WHEN BUG.BG_STATUS LIKE '06-Fixed' THEN 6
						  WHEN BUG.BG_STATUS LIKE '07-Retest' THEN 7
						  WHEN BUG.BG_STATUS LIKE '08-Not Fixed' THEN 8
						  WHEN BUG.BG_STATUS LIKE '09-Closed' THEN 9
						  WHEN BUG.BG_STATUS LIKE '10-Rejected' THEN 10
                          ELSE 0
                      END AS STATUS,
                      BUG.BG_CLOSING_DATE,
                      floor( months_between ( CURRENT_DATE , BUG.BG_DETECTION_DATE)) AS MONTH_SINCE_DETECTION
                      FROM
                      (((BUG LEFT JOIN LINK ON LINK.LN_BUG_ID = BUG.BG_BUG_ID)
                      LEFT JOIN RUN ON RUN.RN_RUN_ID = LINK.LN_ENTITY_ID)
                      LEFT JOIN TEST ON TEST.TS_TEST_ID = RUN.RN_TEST_ID)
                      WHERE LINK.LN_ENTITY_TYPE LIKE 'RUN'
                      ) BUG_PRE_STATS
                      GROUP BY
                      BUG_PRE_STATS.TS_TEST_ID
           ) BUG_STATISTICS ON BUG_STATISTICS.TS_TEST_ID = TEST.TS_TEST_ID
