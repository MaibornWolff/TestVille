package de.maibornwolff.ste.testVille.vizualisationFileWriting;

import de.maibornwolff.ste.testVille.domainModell.ComposedItem;

import java.io.FileWriter;
import java.io.IOException;

public class VisualizationFileGenerator {

    private ComposedItem parsingStepArtifact;
    private String visualizationFilePath;


    public VisualizationFileGenerator(ComposedItem tree, String visualizationFilePath) {
        this.parsingStepArtifact   = tree;
        this.visualizationFilePath = visualizationFilePath;
    }

    public void generateVisualizationFile() throws Exception {
        FileWriter writer = this.createVisualizationFileWriter();
        writer.write(this.generateVisualizationFileContent().toString());
        this.terminateWriteProcess(writer);
    }

    private void terminateWriteProcess(FileWriter writer) throws Exception {
        writer.close();
    }

    private FileWriter createVisualizationFileWriter() throws IOException {
        return new FileWriter(this.visualizationFilePath);
    }

    private StringBuilder generateVisualizationFileContent() {
        StringBuilder toWrite = new StringBuilder();
        toWrite.append(this.visualizationFileHeader());
        toWrite.append(this.visualizationFileBody());
        toWrite.append(this.visualizationFileFooter());
        return toWrite;
    }

    private StringBuilder visualizationFileBody() {
        return this.parsingStepArtifact.produceWritableStringRepresentation();
    }

    private String visualizationFileHeader() {
        return "{\"projectName\":\"___________\", \"_comment\": \"Visualization file generated by TestVille\", \"nodes\": [" ;
    }

    private String visualizationFileFooter() {
        return "]}";
    }
}