package de.maibornwolff.ste.tesla.vizualisationFileWriter;

import de.maibornwolff.ste.tesla.managementTools.hpALM.exportProcess.ExportHandler;
import de.maibornwolff.ste.tesla.managementTools.jiraXRAY.helpers.TranslationMapBuilder;
import de.maibornwolff.ste.tesla.optionSwitchAndHandle.AnalysisRunSetting;
import de.maibornwolff.ste.tesla.optionSwitchAndHandle.OptionHandler;
import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class VisualizationFileGenerator {

    private AnalysisRunSetting runSetting;


    public VisualizationFileGenerator(List<String> commandLineArgs) throws Exception{
        this.runSetting = new OptionHandler(commandLineArgs).getRunSetting();
        if(this.runSetting == null) System.exit(0);
    }

    private void generateVisualizationFileHpAlm() throws Exception{
        ExportHandler eh = new ExportHandler(this.runSetting.getExportFilePath(), this.runSetting.getConfigurationFilePath());
        eh.makeVisualisationFile(this.runSetting.getVisualizationFileTarget());
    }

    private void generateVisualizationFileXray() throws Exception {
        de.maibornwolff.ste.tesla.managementTools.jiraXRAY.collectItems.ExportHandler eh;
        eh = new de.maibornwolff.ste.tesla.managementTools.jiraXRAY.collectItems.ExportHandler(this.runSetting.getExportFilePath());
        List<Writable> toWrite = transformToWritables(eh.getAllEpics()).stream().filter(x -> !x.getWritableChildren().isEmpty()).collect(Collectors.toList());
        this.createVisualizationFile(this.runSetting.getVisualizationFileTarget(), toWrite);
    }


    public void generateVisualizationFile() throws Exception{
        switch (this.runSetting.getExportOrigin()) {
            case HP_ALM:    generateVisualizationFileHpAlm(); break;
            case JIRA_XRAY: generateVisualizationFileXray();  break;
        }
    }

    private static <A> List<Writable> transformToWritables(List<A> listOfAs) {
        return listOfAs.stream().map(x -> (Writable) x).collect(Collectors.toList());
    }


    private Map<String, Map<String, Integer>> generateTranslationMap() throws Exception{
        return TranslationMapBuilder.buildHashMapFromXmlDocument(this.runSetting.getConfigurationFilePath());
    }

    private static Map<String, Integer> generatePriorityRankingMap(Map<String, Map<String, Integer>> translationMap) {
            Map<String, Integer> priorityMap = translationMap.get("priority");

            final List<Map.Entry<String, Integer>> entries = priorityMap.entrySet()
                    .stream()
                    .sorted((x, y) -> y.getValue() - x.getValue()).collect(Collectors.toList())
            ;
            return entries.stream().reduce(new HashMap<String, Integer>(), (x, y) -> {
                x.put(y.getKey(), 1 + entries.indexOf(y));
                return x;
            }, (x, y) -> {x.putAll(y); return x;})
            ;
    }

    private StringBuilder contentToBeWrite(List<Writable> toWrite) throws Exception {
        StringBuilder puffer = new StringBuilder(visualizationFileHeader());
        Map<String, Map<String, Integer>> translationMap     = this.generateTranslationMap();
        Map<String, Integer>              priorityRankingMap = generatePriorityRankingMap(translationMap);
        puffer.append(Writable.produceWritablesStringRepresentation(toWrite, new AtomicInteger(), translationMap, priorityRankingMap));
        puffer.append("]}]}");
        return puffer;
    }

    private void createVisualizationFile(String visualizationFilePath, List<Writable> toWrite) throws Exception {
        StringBuilder contentToBeWrite = contentToBeWrite(toWrite);
        Writer writer = null;

        try{
            writer = new FileWriter(new File(visualizationFilePath));
            writer.write(contentToBeWrite.toString());
        }catch (Exception e) {
            throw new Exception("visualization file could not be created!");
        }

        finally {
            if(writer != null) {
                writer.close();
            }
        }

    }

    private String visualizationFileHeader() {
        return "{\"projectName\":\"___________\"," +
                "\"_comment\": \"Visualization file generated by TesLa_2.0.0_\"" +
                ", \"nodes\":\n[{\"name\":\"root\", \"type\":\"root\",\"attributes\":{}, \"children\":["
        ;
    }
}